uniform int N;
uniform float frequency;
uniform vec2 outputSize;
uniform float dt;
uniform float rayscale;
uniform float rotation; // TODO!

#define M_PI 3.1415926535897932384626433832795

float aspectRatio = outputSize.x / outputSize.y;

vec4 distance2palette(float d)
{
    vec3 c = clamp(vec3(1.0, 1.0, 1.0)/(100.0*d), 0.0, 1.0);
    return vec4(c, 1.0);
}

float polar_distance(vec2 a, vec2 b)
{
    float dr = b.x-a.x;
    float dtheta = b.y-a.y;
    if(abs(dtheta) > M_PI)
        dtheta = a.y-b.y;

    float d2 = dr*dr + 2.0*a.x*b.x*(1.0 - cos(dtheta));
    return sqrt(d2);
}

vec2 theoretical_point(float r, float theta)
{
    // f = lambda t, i: (t, (math.pi/(N)) * (math.sin(2*math.pi*FREQ*t+math.pi*(i%2))+2*i))

    float _theta = mod(theta+M_PI/float(N), 2.0*M_PI);
    float i = floor(float(N)*_theta/(2.0*M_PI));

    float t = r;
    float new_r = t;
    float new_theta = mod((M_PI/float(N)) * (rayscale*sin(2.0*M_PI*frequency*(t+dt) + M_PI*mod(i, 2.0)) + 2.0*i), 2.0*M_PI);
    return vec2(new_r, new_theta);
}

vec4 render(vec2 pixel)
{
    vec2 v = (pixel - vec2(0.5, 0.5)) * vec2(aspectRatio, 1.0);
    float r = length(v);

    float theta;
    if(v.y < 0.0)
        theta = -acos(v.x / r);
    else
        theta = acos(v.x / r);

    vec2 th_point = theoretical_point(r, theta);
    float d = polar_distance(th_point, vec2(r, theta));

    return distance2palette(d);
}

void main()
{
    vec4 color = render(gl_FragCoord.xy / outputSize);
    gl_FragColor = vec4(color.rgb, 1.0);
}

