#ifdef GL_ES
precision mediump float;
#endif

/**
 * Fractal Lab's 2D fractal shader
 * Last update: 10 March 2011
 *
 * Changelog:
 *      0.1     - Initial release
 *      0.2     - Added orbit trap option
 *      0.3     - Added 'Ducks' formula by Samuel Monnier
 *
 * Copyright 2011, Tom Beddard
 * http://www.subblue.com
 *
 * For more generative graphics experiments see:
 * http://www.subblue.com
 *
 * Licensed under the GPL Version 3 license.
 * http://www.gnu.org/licenses/
 *
*/

#define dEMandelbrot             // {"label":"Fractal type", "control":"select", "options":["Mandelbrot", "OrbitTrap", "Ducks"]}
#define dE Mandelbrot             // {"label":"Fractal type", "control":"select", "options":["Mandelbrot", "OrbitTrap", "Ducks"]}

#define maxIterations 100            // {"label":"Iterations", "min":1, "max":400, "step":1, "group_label":"2D parameters"}
#define antialiasing 0.5            // {"label":"Anti-aliasing", "control":"bool", "default":false, "group_label":"Render quality"}

uniform float scale;                // {"label":"Scale",        "min":-10,  "max":10,   "step":0.1,     "default":2,    "group":"Fractal", "group_label":"Fractal parameters"}
uniform float power;                // {"label":"Power",        "min":-20,  "max":20,   "step":0.001,     "default":2,    "group":"Fractal"}
uniform float bailout;              // {"label":"Bailout", "min":0.1, "max":50, "step":0.01, "default":4, "group":"Fractal"}
uniform int   minIterations;        // {"label":"Min. iterations", "min":1, "max":400, "step":1, "group":"Fractal"}

uniform vec2  offset;               // {"label":["Offset x","Offset y"],  "min":-2,   "max":2,    "step":0.001,    "default":[0.36,0.06],  "group":"Fractal"}


uniform int   colorIterations;      // {"label":"Colour iterations", "default": 4, "min":0, "max": 30, "step":1, "group":"Colour", "group_label":"Base colour"}
uniform vec3  color1;               // {"label":"Colour 1",  "default":[1.0, 1.0, 1.0], "group":"Colour", "control":"color"}
uniform vec3  color2;               // {"label":"Colour 2",  "default":[0, 0.53, 0.8], "group":"Colour", "control":"color"}
uniform vec3  color3;               // {"label":"Inside/background colour",  "default":[0.0, 0.0, 0.0], "group":"Colour", "control":"color"}
uniform bool  transparent;          // {"label":"Transparent background", "default":false, "group":"Colour"}
uniform float gamma;                // {"label":"Gamma correction", "default":1, "min":0.1, "max":2, "step":0.01, "group":"Colour"}

uniform float rotation;             // {"label":"Rotation",         "min":-180, "max":180,  "step":0.5,     "default":0,    "group":"Camera", "group_label":"Camera parameters"}
uniform vec3  cameraPosition;       // {"label":["Camera x", "Camera y", "Camera z"],   "default":[-0.5, 0, 2.5], "min":0, "max": 200, "step":0.0000001, "control":"camera", "group":"Camera"}
uniform vec2  size;                 // {"default":[400, 300]}
uniform vec2  outputSize;           // {"default":[800, 600]}


float aspectRatio = outputSize.x / outputSize.y;
mat2  rotationMatrix;


#define BAILOUT 4.0
#define LOG2 float(log(2.0))

// Complex math operations
#define complexMult(a,b) vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x)
#define complexMag(z) float(pow(length(z), 2.0))
#define complexReciprocal(z) vec2(z.x / complexMag(z), -z.y / complexMag(z))
#define complexDivision(a,b) complexMult(a, complexReciprocal(b))
#define complexArg(z) float(atan(z.y, z.x))
#define complexLog(z) vec2(log(length(z)), complexArg(z))
#define complexExp(z) vec2(exp(z.x) * cos(z.y), exp(z.x) * sin(z.y))
#define sinh(x) float((exp(x) - exp(-x)) / 2.0)
#define cosh(x) float((exp(x) + exp(-x)) / 2.0)
#define complexSin(z) vec2(sin(z.x) * cosh(z.y), cos(z.x) * sinh(z.y))
#define complexCos(z) vec2(cos(z.x) * cosh(z.y), -sin(z.x) * sinh(z.y))
#define complexTan(z) vec2(sin(2.0 * z.x)/(cos(2.0 * z.x) + cosh(2.0 * z.y)), sinh(2.0 * z.y)/(cos(2.0 * z.x) + cosh(2.0 * z.y)))
#define complexSinh(z) vec2(sinh(z.x) * cos(z.y), cosh(z.x) * sin(z.y))
#define complexCosh(z) vec2(cosh(z.x) * cos(z.y), sinh(z.x) * sin(z.y))
#define complexTanh(z) vec2(sinh(2.0 * z.x)/(cosh(2.0 * z.a) + cos(2.0 * z.y)), sin(2.0 * z.y)/(cosh(2.0 * z.x) + cos(2.0 * z.y)))
#define polar(r,a) vec2(cos(a) * r, sin(a) * r)
#define complexPower(z,p) vec2(polar(pow(length(z), float(p)), float(p) * complexArg(z)))

// x^y = exp(y * log(x))
#define complexPower2(z, p) vec2(complexExp(complexMult(p, complexLog(z))))


// ============================================================================================ //


float _bailout = exp(bailout);
float log2Bailout = log(2.0 * log(_bailout));
float logPower = log(abs(power));

bool bailoutLimit(vec2 z) {
    return (dot(z, z) >= _bailout);
}


vec3 palette(float normalized) {
    if(normalized < 0.5)
        return mix(color1, color2, normalized*2.0);
    return mix(color2, color3, (normalized-0.5f)*2.0);
}

vec4 Mandelbrot(vec2 z) {
    vec4  color = vec4(color3, 1.0);
    float n = 0.0;
    vec2 c = z;
    
    for (int i = 0; i < int(maxIterations); i++) {
        n += 1.0;
        z = complexPower(z, power) + c;
        
        if (n >= float(minIterations) && bailoutLimit(z)) {
            return vec4(palette(1.0-n/float(maxIterations)), 1.0);
            break;
        }
    }
    
    //return color;
    return vec4(palette(1.0), 1.0);
}



// ============================================================================================ //


vec4 render(vec2 pixel) {
    vec2 z = ((pixel - (size * 0.5)) / size) * vec2(aspectRatio, 1.0) * cameraPosition.z + cameraPosition.xy;
    z *= rotationMatrix;
    return dE(z);
}


// The main loop
void main()
{
    vec4 color = vec4(0.0);
    float n = 0.0;
    
    float rc = cos(radians(rotation));
    float rs = sin(radians(rotation));
    rotationMatrix = mat2(rc, rs, -rs, rc);
    
    color = render(gl_FragCoord.xy);
    
    gl_FragColor = vec4(color.rgb, 1.0);
}

